#include "main.h"

EXEC SQL INCLUDE sqlca;
EXEC SQL WHENEVER SQLERROR SQLPRINT;
EXEC SQL WHENEVER SQLWARNING SQLPRINT;

EXEC SQL BEGIN DECLARE SECTION;
int id_parque;
int id_ubicacion;
char nombre[MAX_NOMBRE_LENGTH];
int capacidad_maxima_diaria;
int cedula_visitante;

EXEC SQL END DECLARE SECTION;

int main() {
    clearConsole();
    DBSingleton* db = getInstance();
    if (!db || !db->conectado) {
        printf(ERROR_NO_CONEXION_DB);
        return 1;
    }

    int opcion;
    do {
        mostrarMenu();
        int result = scanf("%d", &opcion);
        while (getchar() != '\n'); // limpia el buffer

        if (result != 1 || opcion < 0 || opcion > 3) {
            clearConsole();
            printf(CHAR_OPCION_INVALIDA);
            continue;  // vuelve a mostrar el menú
        }

        switch (opcion) {
            case 1: 
                realizarVenta();
                break;
            case 2:
                validarEntradas();
                break;
            case 3:
                totalRecaudadoFecha();
                break;
            case 0:
                printf("Saliendo del programa...\n");
                break;
        }

    } while (opcion != 0);  // <- el bucle ahora solo termina si se elige 0

    printf(CHAR_DESCONECTANDO);
    cerrar_conexion();
    return 0;
}

    

void mostrarMenu()
{
    printf(MENU_SELECCIONAR_OPCION);
    printf(MENU_REALIZAR_VENTA);
    printf(MENU_VALIDAR_ENTRADAS);
    printf(MENU_TOTAL_RECAUDADO_MES_ANIO);
    printf(MENU_SALIR);
}
/*

INICIAR VENTA

REPETIR
    MOSTRAR PARQUES DISPONIBLES
    INGRESAR ID_PARQUE
    INGRESAR FECHA

    INGRESAR CANTIDAD_ENTRADAS
    VALIDAR CAPACIDAD PARQUE

    SI CAPACIDAD_OK
        PREGUNTAR: ¿DESEA PARKING? (S/N)
        SI SÍ:
            INGRESAR CANTIDAD_VEHICULOS
            VALIDAR CAPACIDAD ESTACIONAMIENTO
        SINO:
            CANTIDAD_VEHICULOS = 0

        INGRESAR DATOS VISITANTES (NOMBRE, CÉDULA) x CANTIDAD_ENTRADAS

        CALCULAR PRECIO TOTAL (entradas + parking)
        MOSTRAR RESUMEN
        PREGUNTAR CONFIRMACIÓN

        SI CONFIRMADO
            INGRESAR DATOS TARJETA
            INSERTAR EN BASE DE DATOS
            MOSTRAR CÓDIGOS QR
        FIN SI
    SINO
        MOSTRAR "SIN CUPOS"
    FIN SI

    PREGUNTAR: ¿DESEA INGRESAR OTRA VENTA?
HASTA QUE RESPUESTA SEA "NO"

VOLVER A MENÚ


*/
void realizarVenta() {
    clearConsole();
    int id_parque;
    int cantidad_vehiculos;
    printf(CHAR_IMPRIMIR_ASTERISCO);
    printf(CHAR_PARQUES_DISPONIBLES);
    printf(CHAR_IMPRIMIR_ASTERISCO);
    
    PARQUE* parques;
    // Obtener los parques disponibles
    parques = getParquesDisponibles();
    if(!parques) return;

    int id_parque_seleccionado;
    PARQUE parqueSeleccionado;
    bool parqueValido = false;
    
    do {
        // Imprimir los parques disponibles
        for (int i = 0; i < MAX_PARQUES && parques[i].id_parque != ERROR_SIGNAL; i++) {
            printf(IMPRIMIR_PARQUE, parques[i].id_parque, parques[i].nombre, parques[i].capacidad_maxima_diaria);
        }
    
        printf(CHAR_INGRESE_ID_PARQUE);
        scanf("%d", &id_parque_seleccionado);
        while (getchar() != '\n'); // limpia el buffer
    
        parqueValido = false; // reiniciar bandera
    
        for (int i = 0; i < MAX_PARQUES && parques[i].id_parque != ERROR_SIGNAL; i++) {
            if (parques[i].id_parque == id_parque_seleccionado) {
                parqueSeleccionado = parques[i];
                parqueValido = true;
                break;
            }
        }
    
        if (!parqueValido) {
            clearConsole(); 
            printf(CHAR_ID_PARQUE_INVALIDO);
        }
    
    } while (!parqueValido);
    
    free(parques);


    clearConsole();

    int mes;
    do {
        printf(CHAR_INGRESE_MES);
        imprimirMeses();
        scanf("%d", &mes);
        while (getchar() != '\n'); // limpiar buffer
    
        if (!esMesValido(mes)) {
            clearConsole();
            printf(ERROR_MES_INVALIDO, MIN_MES, MAX_MES);
        }
    } while (!esMesValido(mes));
    
    clearConsole();    
    //En la funcion obtenerDiasDelMes, se ponen los dias que tienen los meses
    int totalDiasMes = obtenerDiasDelMes(mes, ANIO_2025);
    int dia;
    
    do {
        printf(CHAR_INGRESE_DIA, totalDiasMes);
        scanf("%d", &dia);
        while (getchar() != '\n'); // limpia el buffer
    
        if (!esDiaValido(dia, mes, ANIO_2025)) {
            clearConsole();
            printf(ERROR_DIA_INVALIDO, totalDiasMes, mes);
        }
    } while (!esDiaValido(dia, mes, ANIO_2025));
    
    clearConsole();

    int entradasReservadas = getTotalReservasParque(parqueSeleccionado.id_parque, mes, dia);
    int cantidad_entradas;
    int resultado;
    
    do {
        printf(TOTAL_ENTRADAS_RESERVADAS, parqueSeleccionado.id_parque, mes, dia, entradasReservadas);
        printf(CAPACIDAD_MAXIMA_PARQUE, parqueSeleccionado.id_parque, parqueSeleccionado.capacidad_maxima_diaria);
        printf(CANTIDAD_DISPONIBLE, parqueSeleccionado.capacidad_maxima_diaria - entradasReservadas);
        printf(CHAR_INGRESE_CANTIDAD_ENTRADAS);
    
        resultado = scanf("%d", &cantidad_entradas);
    
        // Limpiar buffer para evitar problemas en la siguiente lectura
        while (getchar() != '\n');
    
        if (resultado != 1) {
            clearConsole();
            printf(ERROR_CANTIDAD_INVALIDA);
            cantidad_entradas = -1; // forzar repetición del ciclo
            continue;
        }
    
        if (cantidad_entradas <= 0) {
            clearConsole();
            printf(ERROR_CANTIDAD_INVALIDA);
            continue;
        }
    
        if (!validarCapacidadParque(parqueSeleccionado, mes, dia, cantidad_entradas)) {
            clearConsole();
            printf(CHAR_NO_ESPACIOS_PARQUE, parqueSeleccionado.id_parque, mes, dia);
            cantidad_entradas = -1; // forzar repetición del ciclo
        }
    
    } while (cantidad_entradas <= 0);
    

    clearConsole();

    int deseaParking;
    int resultado_parking;
    
    do {
        printf(CHAR_DESEA_PARKING);
        resultado_parking = scanf("%d", &deseaParking);
        while (getchar() != '\n'); // limpiar buffer

        if (resultado_parking != SI_DESEA_PARKING || (deseaParking != NO_DESEA_PARKING && deseaParking != SI_DESEA_PARKING)) {
            clearConsole();
            printf(ERROR_DESEA_PARKING);
        }
    } while (resultado_parking != SI_DESEA_PARKING || (deseaParking != NO_DESEA_PARKING && deseaParking != SI_DESEA_PARKING));
     
    clearConsole();
    if (resultado_parking == SI_DESEA_PARKING && deseaParking == SI_DESEA_PARKING) {
        int totalReservasParking = getTotalReservasParking(parqueSeleccionado.id_parque, parqueSeleccionado.id_ubicacion, mes, dia);
    
        PARKING parkingSeleccionado = getParking(parqueSeleccionado.id_parque);
    
        int disponibles = parkingSeleccionado.limite_vehiculos - totalReservasParking;
    
        printf(TOTAL_PARKING_RESERVADOS, parqueSeleccionado.id_parque, mes, dia, totalReservasParking);
        printf(CAPACIDAD_MAXIMA_PARKING, parkingSeleccionado.id_parking, parkingSeleccionado.limite_vehiculos);
        printf(CANTIDAD_DISPONIBLE, disponibles);
        printf(CHAR_COSTO_ADICIONAL_PARKING, parkingSeleccionado.costo_adicional);
    
        int cantidad_vehiculos_valida = 0;

        do {
            printf(CHAR_INGRESE_CANTIDAD_VEHICULOS);
            int res = scanf("%d", &cantidad_vehiculos);
            while (getchar() != '\n'); // limpiar buffer
            
            if (res != 1 || cantidad_vehiculos < 0 || cantidad_vehiculos > disponibles) {
                clearConsole();
                printf(ERROR_CANT_VEHICULOS, disponibles);
                cantidad_vehiculos_valida = 0;
            } else if (!validarCapacidadParking(parqueSeleccionado, mes, dia, cantidad_vehiculos)) {
                clearConsole();
                printf(CHAR_NO_ESPACIOS_PARKING, parqueSeleccionado.id_parque, mes, dia);
                cantidad_vehiculos_valida = 0;
            } else {
                cantidad_vehiculos_valida = 1;
            }
        } while (!cantidad_vehiculos_valida);
        
    
    } else {
        cantidad_vehiculos = 0;
    }
    

    //***************************INGRESAR VISITANTES********************************

    // INGRESAR DATOS VISITANTES (NOMBRE, CÉDULA) x CANTIDAD_ENTRADAS
    //Todos estos visitantes van al dia que ya se pregunto
    clearConsole();
    VISITANTE visitantes[cantidad_entradas];
    //Si el visitante exiuste (por la ci) se agrega a la lista, sino se da de alta
    for (int i = 0; i < cantidad_entradas; i++) {
        char cedula[MAX_CI_LENGTH];
        printf(CHAR_INGRESE_CEDULA);
        scanf("%s", cedula);

        if (!esCedulaValida(cedula)) {
            clearConsole();
            printf(CEDULA_INVALIDA_INTENTE_NUEVAMENTE);
            i--; // Repetir la iteración actual
            continue;
        }

        VISITANTE visitante = getVisitante(cedula);
        if(visitante.id_visitante != ERROR_SIGNAL){
            clearConsole();
            printf(CHAR_VISITANTE_ENCONTRADO, visitante.nombre, visitante.id_visitante);

        }else{
            printf(VISITANTE_NO_ENCONTRADO);
            char nombre[MAX_NOMBRE_LENGTH];
            do{
                printf(CHAR_INGRESE_NOMBRE_VISITANTE);
                scanf(" %[^\n]", nombre); // Leer hasta el salto de línea
                if (strlen(nombre) == 0 || strlen(nombre) > MAX_NOMBRE_LENGTH) {
                    clearConsole();
                    printf(ERROR_NOMBRE_INVALIDO);
                    continue; // Repetir la iteración actual
    
                }
            }while(!esNombreValido(nombre));
            visitante = crearVisitante(cedula, nombre);
        }        
        //Si este visitante ya esta en el arreglo, no se agrega
        bool existe = false;
        for (int j = 0; j < i; j++) {
            if (visitantes[j].id_visitante == visitante.id_visitante) {
                clearConsole();
                existe = true;
                break;
            }
        }
        if (existe) {
            clearConsole();
            printf(ERROR_VISITANTE_INGRESADO, cedula);
            i--; // Repetir la iteración actual
            continue;
        }
        visitantes[i] = visitante;
    }




    //***************************PAGAR*************************************************
    // CALCULAR PRECIO TOTAL (entradas + parking)
    long precio_total = 0;
    long precio_entrada=getPrecio(parqueSeleccionado.id_parque,mes,dia);
    precio_total += precio_entrada * cantidad_entradas;
    if (cantidad_vehiculos > 0) {
        PARKING parkingSeleccionado = getParking(parqueSeleccionado.id_parque);
        precio_total += parkingSeleccionado.costo_adicional * cantidad_vehiculos;
    }

    // PREGUNTAR CONFIRMACIÓN

    int confirmar;
    int resultado_confirmar;

    do {
        // MOSTRAR RESUMEN
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_RESUMEN_VENTA);
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_MOSTRAR_PARQUE, parqueSeleccionado.nombre, parqueSeleccionado.id_parque);
        printf(CHAR_MOSTRAR_FECHA, dia, mes);
        printf(CHAR_MOSTRAR_CANT_ENTRADAS, cantidad_entradas);
        if (cantidad_vehiculos > 0) {
            printf(CHAR_CANTIDAD_VEHICULOS, cantidad_vehiculos);
        } else {
            printf(CHAR_NO_RESERVADO_PARKING);
        }
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_VISITANTES);
        for (int i = 0; i < cantidad_entradas; i++) {
            printf(CHAR_IMPRIMIR_VISITANTE, visitantes[i].nombre, visitantes[i].ci, visitantes[i].id_visitante);
        }
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_MONTO_TOTAL, precio_total);
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_DESEA_CONFIRMAR_VENTA);

        resultado_confirmar = scanf("%d", &confirmar);
        while (getchar() != '\n');  // Limpiar buffer

        if (resultado_confirmar != 1 || confirmar < 0 || confirmar > 1) {
            clearConsole();
            printf(CHAR_OPCION_INVALIDA);
        }

    } while (resultado_confirmar != 1 || confirmar < 0 || confirmar > 1);

    if (confirmar == 0) {
        clearConsole();
        printf(CHAR_VENTA_CANCELADA);
        return;
    }
    clearConsole();
    // INGRESAR DATOS TARJETA
    char numero_tarjeta[MAX_N_TARJETA_LENGTH_BUFFER];
    char fecha_vencimiento[MAX_FECHA_VENCIMIENTO_LENGTH];
    char cvv[MAX_CVV_LENGTH_BUFFER];
    char debito_credito[MAX_BOOL_LENGTH];
    // Solicitar número de tarjeta hasta que sea válido
    do {
        printf(CHAR_INGRESE_DATOS_TARJETA);
        printf(CHAR_INGRESE_NUMERO_TARJETA);
        scanf("%s", numero_tarjeta);
        if (strlen(numero_tarjeta) != MAX_N_TARJETA_LENGTH || !esNumeroValidoTarjeta(numero_tarjeta)) {
            clearConsole();
            printf(ERROR_TARJETA_INVALIDA);
        }
    } while (strlen(numero_tarjeta) != MAX_N_TARJETA_LENGTH || !esNumeroValidoTarjeta(numero_tarjeta));
    // Solicitar fecha de vencimiento hasta que sea válida
    clearConsole();
    do {         

        printf(CHAR_INGRESE_F_VENC_TARJETA);
        scanf("%s", fecha_vencimiento);
        if (strlen(fecha_vencimiento) != MAX_FECHA_VENCIMIENTO_LENGTH || fecha_vencimiento[2] != SEPARADOR_TARJETA) {
            clearConsole();
            printf(ERROR_F_VENC_INVALIDA);
        }
    } while (strlen(fecha_vencimiento) != MAX_FECHA_VENCIMIENTO_LENGTH || fecha_vencimiento[2] != SEPARADOR_TARJETA);
    clearConsole();
    // Solicitar CVV hasta que sea válido
    do {
        printf(CHAR_INGRESE_CVV);
        scanf("%s", cvv);
        if (strlen(cvv) != MAX_CVV_LENGTH || !esNumeroValido(cvv)) {
            clearConsole();
            printf(ERROR_CVV_INVALIDO);
        }
    } while (strlen(cvv) != MAX_CVV_LENGTH || !esNumeroValido(cvv));
    clearConsole();
    // Solicitar tipo de tarjeta hasta que sea válido
    int deseaTarjeta;
    int resultado_d_c;
    
    do {
        printf(CHAR_INGRESE_TIPO_TARJETA); // Ej: "Tipo de tarjeta (1: Débito, 0: Crédito): "
        resultado_d_c = scanf("%d", &deseaTarjeta);
        while (getchar() != '\n'); // limpia buffer
    
        if (resultado_d_c != CHAR_DEBITO || (deseaTarjeta != CHAR_CREDITO && deseaTarjeta != CHAR_DEBITO)) {
            clearConsole();
            printf(ERROR_TIPO_TARJETA_INVALIDO); // Ej: "Entrada inválida. Ingrese 1 para Débito o 0 para Crédito."
        }
    } while (resultado_d_c != CHAR_DEBITO || (deseaTarjeta != CHAR_CREDITO && deseaTarjeta != CHAR_DEBITO));
        
    // Insertar en base de datos
    printf("Registrando venta...\n");

    //INSERTAR EN VISITANTES (hecho);
    //FOREACH VISITANTE
    //  INSERTAR EN PASES
    //END FOREACH


    printf("Venta registrada (simulada).\n");
}

void validarEntradas() { 
    clearConsole();
    char cedula[MAX_CI_LENGTH];
    bool valido;
    
    do {
        printf(CHAR_INGRESE_CEDULA);
        scanf("%s", cedula);
        while (getchar() != '\n'); // limpiar buffer
    
        valido = esCedulaValida(cedula);
        if (!valido) {
            clearConsole();
            printf(ERROR_CEDULA_INVALIDA);
        }
    } while (!valido);
    
    
    clearConsole();

    int mes;
    do {
        printf(CHAR_INGRESE_MES);
        imprimirMeses();
        scanf("%d", &mes);
        while (getchar() != '\n'); // limpiar buffer
    
        if (!esMesValido(mes)) {
            clearConsole();
            printf(ERROR_MES_INVALIDO, MIN_MES, MAX_MES);
        }
    } while (!esMesValido(mes));
    clearConsole();

    int dia;
    int resultado;
    int totalDiasMes = obtenerDiasDelMes(mes, ANIO_2025);
    
    do {
        printf(CHAR_INGRESE_DIA, totalDiasMes); 
        resultado = scanf("%d", &dia);
        while (getchar() != '\n'); // limpia buffer
    
        if (resultado != 1 || !esDiaValido(dia, mes, ANIO_2025)) {
            clearConsole();
            printf(ERROR_DIA_INVALIDO); 
        }
    } while (resultado != 1 || !esDiaValido(dia, mes, ANIO_2025));
    

    //Buscar el visitante en la base de datos
    VISITANTE visitante= getVisitante(cedula);
    if(visitante.id_visitante== ERROR_SIGNAL ) {
        printf(ERROR_VISITANTE_NO_ENCONTRADO,cedula);
        return;
    };
    clearConsole();
    printf(CHAR_IMPRIMIR_ASTERISCO);
    printf(CHAR_VISITANTE_ENCONTRADO, visitante.nombre, visitante.id_visitante);
    //Agarrar el total de pases que tiene ese visitante
    imprimirPasesVisitantePorFecha(visitante.id_visitante, mes, dia);
    printf(CHAR_IMPRIMIR_ASTERISCO);
    return;
}

void totalRecaudadoFecha(){
    //Preguntar el año
    clearConsole();
    int anio;
    int resultado_dia;
    
    do {
        printf(CHAR_INGRESE_ANIO);
        resultado_dia = scanf("%d", &anio);
        while (getchar() != '\n'); // limpiar buffer
    
        if (resultado_dia != 1 || !esAnioValido(anio)) {
            clearConsole();
            printf(ERROR_ANIO_INVALIDO); // mensaje para año inválido
        }
    } while (resultado_dia != 1 || !esAnioValido(anio));
    
    int mes;
    int resultado_mes;
    
    do {
        printf(CHAR_INGRESE_MES);
        imprimirMeses();
        resultado_mes = scanf("%d", &mes);
        while (getchar() != '\n'); // limpiar buffer
    
        if (resultado_mes != 1 || !esMesValido(mes)) {
            clearConsole();
            printf(ERROR_MES_INVALIDO, MIN_MES, MAX_MES);
        }
    } while (resultado_mes != 1 || !esMesValido(mes));
    

    //Agarrar el monto total de compras segun ese año y mes
    long monto_total=getMontoTotal(anio,mes);

    printf(CHAR_IMPRIMIR_ASTERISCO);
    printf(CHAR_MONTO_TOTAL,monto_total);
    printf(CHAR_IMPRIMIR_ASTERISCO);
    return;
}
