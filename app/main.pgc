#include "main.h"

EXEC SQL INCLUDE sqlca;
EXEC SQL WHENEVER SQLERROR SQLPRINT;
EXEC SQL WHENEVER SQLWARNING SQLPRINT;

EXEC SQL BEGIN DECLARE SECTION;
int id_parque;
int id_ubicacion;
char nombre[MAX_NOMBRE_LENGTH];
int capacidad_maxima_diaria;
int cedula_visitante;

EXEC SQL END DECLARE SECTION;

int main() {
    clearConsole();
    DBSingleton* db = getInstance();
    if (!db || !db->conectado) {
        printf(ERROR_NO_CONEXION_DB);
        return 1;
    }

    int opcion;
    do {
        //haz un cin.ignore
        
        // clearConsole();
        mostrarMenu();
        int result = scanf("%d", &opcion);
        while (getchar() != '\n'); // limpia el buffer

        if (result != 1 || opcion < 0 || opcion > 4) {
            clearConsole();
            printf(CHAR_OPCION_INVALIDA);
            continue;  // vuelve a mostrar el menú
        }

        switch (opcion) {
            case 1: 
                realizarVenta();
                break;
            case 2:
                validarEntradas();
                break;
            case 3:
                totalRecaudadoFecha();
                break;
            case 4:
                registrarCliente();
                break;
            case 0:
                cerrar_conexion();
                printf(CHAR_SALIENDO);
                break;
        }

    } while (opcion != 0);  // <- el bucle ahora solo termina si se elige 0

    printf(CHAR_DESCONECTANDO);
    cerrar_conexion();
    return 0;
}

    

void mostrarMenu()
{
    printf(MENU_SELECCIONAR_OPCION);
    printf(MENU_REALIZAR_VENTA);
    printf(MENU_VALIDAR_ENTRADAS);
    printf(MENU_TOTAL_RECAUDADO_MES_ANIO);
    printf(MENU_REGISTRAR_CLIENTE);
    printf(MENU_SALIR);
}

void realizarVenta() {
    clearConsole();
    char ci_cliente[MAX_CI_LENGTH];

    do {
        printf(CHAR_INGRESE_CEDULA);
        scanf("%s", ci_cliente);

        if (!esCedulaValida(ci_cliente)) {
            clearConsole();
            printf(CEDULA_INVALIDA_INTENTE_NUEVAMENTE);
        }
    } while (!esCedulaValida(ci_cliente));

    
    if(!existeCliente(ci_cliente)){
        clearConsole();
        printf(CHAR_CLIENTE_INEXISTENTE);
        return;
    }

    CLIENTE cliente= getCliente(ci_cliente);
    clearConsole();
    printf(CHAR_CLIENTE_ENCONTRADO, cliente.nombre, cliente.ci);

    int id_parque;
    int cantidad_vehiculos;
    printf(CHAR_IMPRIMIR_ASTERISCO);
    printf(CHAR_PARQUES_DISPONIBLES);
    printf(CHAR_IMPRIMIR_ASTERISCO);
    
    PARQUE* parques;
    // Obtener los parques disponibles
    parques = getParquesDisponibles();
    if(!parques) return;

    int id_parque_seleccionado;
    PARQUE parqueSeleccionado;
    bool parqueValido = false;
    
    do {
        // Imprimir los parques disponibles
        for (int i = 0; i < MAX_PARQUES && parques[i].id_parque != ERROR_SIGNAL; i++) {
            printf(IMPRIMIR_PARQUE, parques[i].id_parque, parques[i].nombre, parques[i].capacidad_maxima_diaria);
        }
    
        printf(CHAR_INGRESE_ID_PARQUE);
        scanf("%d", &id_parque_seleccionado);
        while (getchar() != '\n'); // limpia el buffer
    
        parqueValido = false; // reiniciar bandera
    
        for (int i = 0; i < MAX_PARQUES && parques[i].id_parque != ERROR_SIGNAL; i++) {
            if (parques[i].id_parque == id_parque_seleccionado) {
                parqueSeleccionado = parques[i];
                parqueValido = true;
                break;
            }
        }
    
        if (!parqueValido) {
            clearConsole(); 
            printf(CHAR_ID_PARQUE_INVALIDO);
        }
    
    } while (!parqueValido);
    
    free(parques);


    clearConsole();

    int mes;
    do {
        printf(CHAR_INGRESE_MES);
        int mesActual = getMesActual();
        imprimirMeses();
        scanf("%d", &mes);
        while (getchar() != '\n'); // limpiar buffer
    
        if (!esMesValido(mes)) {
            clearConsole();
            printf(ERROR_MES_INVALIDO, MIN_MES, MAX_MES);
        }

        //Preguntar si el mes es menor al mes actual
        if(mes < getMesActual()) {
            clearConsole();
            printf(ERROR_MES_ACTUAL, mes, getMesActual());
        }
    } while (!esMesValido(mes) || mes < getMesActual());
    
    clearConsole();    
    //En la funcion obtenerDiasDelMes, se ponen los dias que tienen los meses
    int totalDiasMes = obtenerDiasDelMes(mes, ANIO_2025);


    int dia;
    
    do {
        printf(CHAR_INGRESE_DIA, totalDiasMes);
        scanf("%d", &dia);
        while (getchar() != '\n'); // limpia el buffer
    
        if (!esDiaValido(dia, mes, ANIO_2025)) {
            clearConsole();
            printf(ERROR_DIA_INVALIDO, totalDiasMes, mes);
        }
        if(dia < getDiaActual() && mes == getMesActual()) {
            clearConsole();
            printf(ERROR_DIA_ACTUAL, dia, getDiaActual());
        }
    } while (!esDiaValido(dia, mes, ANIO_2025) || (dia < getDiaActual() && mes == getMesActual()));
    
    clearConsole();

    char fecha_acceso[MAX_FECHA_LENGTH];
    snprintf(fecha_acceso, sizeof(fecha_acceso), "%04d-%02d-%02d", ANIO_2025, mes, dia);

    PRECIO precio = getPrecio(parqueSeleccionado.id_parque, fecha_acceso);
    if(precio.id_precio == ERROR_SIGNAL) {
        clearConsole();
        printf(ERROR_PRECIO_NO_ENCONTRADO, parqueSeleccionado.id_parque, mes, dia);
        return;
    }

    //Imprimir precio

    //***************************VALIDAR CAPACIDAD PARQUE********************************


    int entradasReservadas = getTotalReservasParque(parqueSeleccionado.id_parque, mes, dia);
    char buffer[100];
    int cantidad_entradas;
    int es_valido;
    
    if(entradasReservadas == parqueSeleccionado.capacidad_maxima_diaria) {
        clearConsole();
        printf(CHAR_NO_ESPACIOS_PARQUE, parqueSeleccionado.id_parque, mes, dia);
        return;
    }

    do {
        printf(TOTAL_ENTRADAS_RESERVADAS, parqueSeleccionado.id_parque, mes, dia, entradasReservadas);
        printf(CAPACIDAD_MAXIMA_PARQUE, parqueSeleccionado.id_parque, parqueSeleccionado.capacidad_maxima_diaria);
        printf(CANTIDAD_DISPONIBLE, parqueSeleccionado.capacidad_maxima_diaria - entradasReservadas);
        printf(CHAR_INGRESE_CANTIDAD_ENTRADAS);

        if (!fgets(buffer, sizeof(buffer), stdin)) {
            clearConsole();
            printf(ERROR_CANTIDAD_INVALIDA);
            cantidad_entradas = -1;
            continue;
        }

        // Eliminar salto de línea si existe
        buffer[strcspn(buffer, "\n")] = 0;

        // Validar que toda la cadena sea dígitos
        es_valido = 1;
        for (int i = 0; buffer[i] != '\0'; i++) {
            if (!isdigit((unsigned char)buffer[i])) {
                es_valido = 0;
                break;
            }
        }

        if (!es_valido || strlen(buffer) == 0) {
            clearConsole();
            printf(ERROR_CANTIDAD_INVALIDA);
            cantidad_entradas = -1;
            continue;
        }

        cantidad_entradas = atoi(buffer);

        if (cantidad_entradas <= 0) {
            clearConsole();
            printf(ERROR_CANTIDAD_INVALIDA);
            continue;
        }

        if (!validarCapacidadParque(parqueSeleccionado, mes, dia, cantidad_entradas)) {
            clearConsole();
            printf(CHAR_NO_ESPACIOS_PARQUE, parqueSeleccionado.id_parque, mes, dia);
            cantidad_entradas = -1;
        }

    } while (cantidad_entradas <= 0);

        

    clearConsole();

    int deseaParking;
    int resultado_parking;
    
    do {
        printf(CHAR_DESEA_PARKING);
        resultado_parking = scanf("%d", &deseaParking);
        while (getchar() != '\n'); // limpiar buffer

        if (resultado_parking != SI_DESEA_PARKING || (deseaParking != NO_DESEA_PARKING && deseaParking != SI_DESEA_PARKING)) {
            clearConsole();
            printf(ERROR_DESEA_PARKING);
        }
    } while (resultado_parking != SI_DESEA_PARKING || (deseaParking != NO_DESEA_PARKING && deseaParking != SI_DESEA_PARKING));
     
    clearConsole();
    if (resultado_parking == SI_DESEA_PARKING && deseaParking == SI_DESEA_PARKING) {
        int cantidad_vehiculos_valida = 0;
        int totalReservasParking = getTotalReservasParking(parqueSeleccionado.id_parque, parqueSeleccionado.id_ubicacion, mes, dia);
        PARKING parkingSeleccionado = getParking(parqueSeleccionado.id_parque);
        int disponibles = parkingSeleccionado.limite_vehiculos - totalReservasParking;
    
    
        
        do {

            printf(TOTAL_PARKING_RESERVADOS, parqueSeleccionado.id_parque, mes, dia, totalReservasParking);
            printf(CAPACIDAD_MAXIMA_PARKING, parkingSeleccionado.id_parking, parkingSeleccionado.limite_vehiculos);
            printf(CANTIDAD_DISPONIBLE, disponibles);
            printf(CHAR_COSTO_ADICIONAL_PARKING, parkingSeleccionado.costo_adicional);        
            printf(CHAR_INGRESE_CANTIDAD_VEHICULOS);
            int res = scanf("%d", &cantidad_vehiculos);
            while (getchar() != '\n'); // limpiar buffer

            if(cantidad_vehiculos > cantidad_entradas) {
                clearConsole();
                printf(ERROR_CANT_VEHICULOS_MAYOR_ENTRADAS, cantidad_entradas);
                cantidad_vehiculos_valida = 0;
                continue;
            }
            if (res != 1 || cantidad_vehiculos < 0 || cantidad_vehiculos > disponibles) {
                clearConsole();
                printf(ERROR_CANT_VEHICULOS, disponibles);
                cantidad_vehiculos_valida = 0;
            } else if (!validarCapacidadParking(parqueSeleccionado, mes, dia, cantidad_vehiculos)) {
                clearConsole();
                printf(CHAR_NO_ESPACIOS_PARKING, parqueSeleccionado.id_parque, mes, dia);
                cantidad_vehiculos_valida = 0;
            } else {
                cantidad_vehiculos_valida = 1;
            }
        } while (!cantidad_vehiculos_valida);
        
    
    } else {
        cantidad_vehiculos = 0;
    }
    

    //***************************INGRESAR VISITANTES********************************

    // INGRESAR DATOS VISITANTES (NOMBRE, CÉDULA) x CANTIDAD_ENTRADAS
    //Todos estos visitantes van al dia que ya se pregunto
    clearConsole();
    VISITANTE visitantes[cantidad_entradas];
    //Si el visitante exiuste (por la ci) se agrega a la lista, sino se da de alta
    for (int i = 0; i < cantidad_entradas; i++) {
        char cedula[MAX_CI_LENGTH];
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_INGRESAR_VISITANTE, i + 1, cantidad_entradas);
        printf(CHAR_INGRESE_CEDULA_VISITANTE);
        scanf("%s", cedula);

        if (!esCedulaValida(cedula)) {
            clearConsole();
            printf(CEDULA_INVALIDA_INTENTE_NUEVAMENTE);
            i--; // Repetir la iteración actual
            continue;
        }

        // Verificar si el visitante ya existe
        VISITANTE visitante = getVisitante(cedula);


        //luego, preguntar si ya tiene pases para esa misma fecha
        if(existePaseVisitante(visitante.id_visitante, mes, dia)) {
            clearConsole();
            printf(CHAR_IMPRIMIR_ASTERISCO);
            printf(CHAR_VISITANTE_EXISTE, visitante.nombre, visitante.ci);
            printf(CHAR_PASES_EXISTENTES);
            
            imprimirPasesVisitantePorFecha(visitante.id_visitante, mes, dia);

            printf(CHAR_IMPRIMIR_ASTERISCO);
            
            //repetir la iteración actual
            i--;
            continue;
            
        }

        if(visitante.id_visitante != ERROR_SIGNAL){
            clearConsole();
            printf(CHAR_VISITANTE_ENCONTRADO, visitante.nombre, visitante.ci);
            
        }else{
            printf(VISITANTE_NO_ENCONTRADO);
            char nombre[MAX_NOMBRE_LENGTH];
            do{
                printf(CHAR_INGRESE_NOMBRE_VISITANTE);
                scanf(" %[^\n]", nombre); // Leer hasta el salto de línea
                if (strlen(nombre) == 0 || strlen(nombre) > MAX_NOMBRE_LENGTH) {
                    clearConsole();
                    printf(ERROR_NOMBRE_INVALIDO);
                    continue; // Repetir la iteración actual
    
                }
            }while(!esNombreValido(nombre));
            visitante = crearVisitante(cedula, nombre);
        }        
        //Si este visitante ya esta en el arreglo, no se agrega
        bool existe = false;
        for (int j = 0; j < i; j++) {
            if (visitantes[j].id_visitante == visitante.id_visitante) {
                clearConsole();
                existe = true;
                break;
            }
        }
        if (existe) {
            clearConsole();
            printf(ERROR_VISITANTE_INGRESADO, cedula);
            i--; // Repetir la iteración actual
            continue;
        }

        visitantes[i] = visitante;
    }




    //***************************PAGAR*************************************************
    // CALCULAR PRECIO TOTAL (entradas + parking)
    long precio_total = 0;

    long precio_entrada = precio.precio;
    precio_total += precio_entrada * cantidad_entradas;
    long precio_parking = 0;
    if (cantidad_vehiculos > 0) {
        PARKING parkingSeleccionado = getParking(parqueSeleccionado.id_parque);
        precio_parking = parkingSeleccionado.costo_adicional * cantidad_vehiculos;
    }
    precio_total += precio_parking;

    long monto_total_con_iva = precio_total + (precio_total * IVA / 100);
    long iva_aplicado = precio_total * IVA / 100;


    // PREGUNTAR CONFIRMACIÓN

    int confirmar;
    int resultado_confirmar;
    // clearConsole();
    do {
        // MOSTRAR RESUMEN
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_RESUMEN_VENTA);
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_MOSTRAR_PARQUE, parqueSeleccionado.nombre, parqueSeleccionado.id_parque);
        printf(CHAR_MOSTRAR_FECHA, dia, mes);
        printf(CHAR_MOSTRAR_COSTO_PARQUE, precio_entrada);
        printf(CHAR_MOSTRAR_CANT_ENTRADAS, cantidad_entradas);
        if (cantidad_vehiculos > 0) {
            printf(CHAR_IMPRIMIR_LINEA);
            PARKING parkingSeleccionado = getParking(parqueSeleccionado.id_parque);
            printf(CHAR_COSTO_ADICIONAL_PARKING, parkingSeleccionado.costo_adicional);
            printf(CHAR_CANTIDAD_VEHICULOS, cantidad_vehiculos);
            printf(CHAR_IMPRIMIR_LINEA);
        } else {
            printf(CHAR_NO_RESERVADO_PARKING);
        }
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_VISITANTES);
        for (int i = 0; i < cantidad_entradas; i++) {
            printf(CHAR_IMPRIMIR_VISITANTE, visitantes[i].nombre, visitantes[i].ci, visitantes[i].id_visitante);
        }
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_MONTO_TOTAL, precio_total);
        printf(CHAR_IMPRIMIR_ASTERISCO);
        printf(CHAR_DESEA_CONFIRMAR_VENTA);

        resultado_confirmar = scanf("%d", &confirmar);
        while (getchar() != '\n');  // Limpiar buffer

        if (resultado_confirmar != 1 || confirmar < 0 || confirmar > 1) {
            clearConsole();
            printf(CHAR_OPCION_INVALIDA);
        }

    } while (resultado_confirmar != 1 || confirmar < 0 || confirmar > 1);

    if (confirmar == 0) {
        clearConsole();
        printf(CHAR_VENTA_CANCELADA);
        return;
    }
    clearConsole();

    COMPRA compra;
    // INGRESAR DATOS TARJETA
    char numero_tarjeta[MAX_N_TARJETA_LENGTH_BUFFER];
    char fecha_vencimiento[MAX_FECHA_VENCIMIENTO_LENGTH];
    char cvv[MAX_CVV_LENGTH_BUFFER];
    char debito_credito[MAX_BOOL_LENGTH];
    // Solicitar número de tarjeta hasta que sea válido
    do {
        printf(CHAR_INGRESE_NUMERO_TARJETA);
        if (fgets(numero_tarjeta, sizeof(numero_tarjeta), stdin)) {
            // Eliminar salto de línea final, si existe
            numero_tarjeta[strcspn(numero_tarjeta, "\n")] = 0;
        } else {
            clearConsole();
            printf(ERROR_TARJETA_INVALIDA);
            continue;
        }

        if (strlen(numero_tarjeta) != MAX_N_TARJETA_LENGTH || !esNumeroValidoTarjeta(numero_tarjeta)) {
            clearConsole();
            printf(ERROR_TARJETA_INVALIDA);
        }
    } while (strlen(numero_tarjeta) != MAX_N_TARJETA_LENGTH || !esNumeroValidoTarjeta(numero_tarjeta));
    // Solicitar fecha de vencimiento hasta que sea válida
    clearConsole();
    strcpy(compra.numero_tarjeta, numero_tarjeta);
    do {         
        printf(CHAR_INGRESE_F_VENC_TARJETA);
        scanf("%s", fecha_vencimiento);
        limpiarBuffer();  // Limpiar buffer después de scanf

        bool formato_valido = strlen(fecha_vencimiento) == 5 && fecha_vencimiento[2] == SEPARADOR_TARJETA;
        bool vencida = false;

        if (formato_valido) {
            vencida = esTarjetaVencida(fecha_vencimiento);
        }

        if (!formato_valido) {
            clearConsole();
            printf(ERROR_F_VENC_INVALIDA);
        } else if (vencida) {
            clearConsole();
            printf(ERROR_F_VENC_VENCIDA);
        }

    } while (strlen(fecha_vencimiento) != 5 || fecha_vencimiento[2] != SEPARADOR_TARJETA || esTarjetaVencida(fecha_vencimiento));

    // Convertir MM/AA a AAAA-MM-01
    int mes_venc, anio_venc;
    if (sscanf(fecha_vencimiento, "%2d/%2d", &mes_venc, &anio_venc) == 2) {
        int anio_full = 2000 + anio_venc;
        snprintf(compra.fecha_vencimiento, MAX_FECHA_VENCIMIENTO_LENGTH_BUFFER, "%04d-%02d-01", anio_full, mes_venc);
    } else {
        compra.fecha_vencimiento[0] = '\0'; // o manejar error
    }


    clearConsole();

    // Solicitar CVV
    do {
        printf(CHAR_INGRESE_CVV);
        scanf("%s", cvv);
        limpiarBuffer();  // Limpiar buffer después de scanf

        if (strlen(cvv) != MAX_CVV_LENGTH || !esNumeroValido(cvv)) {
            clearConsole();
            printf(ERROR_CVV_INVALIDO);
        }
    } while (strlen(cvv) != MAX_CVV_LENGTH || !esNumeroValido(cvv));

    strcpy(compra.cvv, cvv);

    clearConsole();
    // Solicitar tipo de tarjeta hasta que sea válido
    int deseaTarjeta;
    int resultado_d_c;
    
    do {
        printf(CHAR_INGRESE_TIPO_TARJETA); // Ej: "Tipo de tarjeta (1: Débito, 0: Crédito): "
        resultado_d_c = scanf("%d", &deseaTarjeta);
        while (getchar() != '\n'); // limpia buffer
    
        if (resultado_d_c != CHAR_DEBITO || (deseaTarjeta != CHAR_CREDITO && deseaTarjeta != CHAR_DEBITO)) {
            clearConsole();
            printf(ERROR_TIPO_TARJETA_INVALIDO); // Ej: "Entrada inválida. Ingrese 1 para Débito o 0 para Crédito."
        }
    } while (resultado_d_c != CHAR_DEBITO || (deseaTarjeta != CHAR_CREDITO && deseaTarjeta != CHAR_DEBITO));

    clearConsole();
    strcpy(compra.debito_credito, deseaTarjeta == 1 ? CHAR_DEBITO_D : CHAR_CREDITO_C);
    compra.debito_credito[1] = '\0';
        
    // ************************************************************************************Insertar en base de datos************************************************************************************

    // ************************************************************************************COMPRA************************************************************************************
    //INSERTAR EN VISITANTES (hecho);
    // INSERTAR EN COMPRA
    // Variables para fecha
    char fecha_actual[11];     // "YYYY-MM-DD"
    char fecha_hora[20];       // "YYYY-MM-DD HH:MM:SS"

    // Obtener fecha y hora actuales
    obtener_fecha_hora_actual(fecha_actual, fecha_hora);

    compra.cant_pases = cantidad_entradas;
    compra.cant_vehiculos = cantidad_vehiculos;
    


    strcpy(compra.fecha_compra, fecha_actual);
    strcpy(compra.hora_compra, fecha_hora);
    
    compra.id_cliente = cliente.id_cliente;
    compra.monto_total = monto_total_con_iva;

    // Insertar compra en la base de datos
    COMPRA compra_insertada = insertarCompra(compra);
    if(compra_insertada.id_compra == ERROR_SIGNAL) {
        printf(ERROR_INSERTAR_COMPRA, compra.id_compra);
        printf("Error al insertar la compra con ID: %d\n", compra.id_compra);
        printf("sqlca: %s\n", sqlca.sqlerrm.sqlerrmc);
        printf("sqlcode: %d\n", sqlca.sqlcode);
        printf("sqlstate: %s\n", sqlca.sqlstate);

        return;
    }
    // ************************************************************************************PASE************************************************************************************
    // INSERTAR EN PASES
    PASE pase[cantidad_entradas];
    PASE pase_insertado[cantidad_entradas];
    PASE_PARQUE pase_parque_insertado[cantidad_entradas];
    for (int i = 0; i < cantidad_entradas; i++) {
        pase[i].id_pase=getMaxIdPase() + 1;
        pase[i].id_visitante = visitantes[i].id_visitante;
        pase[i].id_compra = compra_insertada.id_compra;
        // Generar un código QR único para el pase
        time_t now = time(NULL);
        snprintf(pase[i].codigo_qr, sizeof(pase[i].codigo_qr), "QR_%d_%d_%d_%ld", pase[i].id_visitante, pase[i].id_compra, pase[i].id_pase, now);
        pase[i].precio_total = precio_entrada; // El precio total del pase es el precio de la entrada
        pase_insertado[i] = insertarPase(pase[i]);


        if (pase_insertado[i].id_pase == ERROR_SIGNAL) {
            // clearConsole();
            printf(ERROR_INSERTAR_PASE, pase[i].id_pase);
            printf("Error al insertar el pase con ID: %d\n", pase[i].id_pase);
            printf("sqlca: %s\n", sqlca.sqlerrm.sqlerrmc);
            printf("sqlcode: %d\n", sqlca.sqlcode);
            printf("sqlstate: %s\n", sqlca.sqlstate);
            return;
        }   
        strncpy(pase_insertado[i].pase_parque.fecha_accesso, fecha_acceso, MAX_FECHA_LENGTH);
        pase_insertado[i].pase_parque.id_parque = parqueSeleccionado.id_parque;
        pase_insertado[i].pase_parque.id_pase = pase_insertado[i].id_pase;
        pase_insertado[i].pase_parque.id_pase_parque = getMaxIdPaseParque() + 1;
        pase_insertado[i].pase_parque.incluye_parking = (cantidad_vehiculos > 0) ? true : false;
        pase_insertado[i].pase_parque.id_precio= precio.id_precio;
        // Insertar el pase_parque en la base de datos
        pase_parque_insertado[i] = insertarPaseParque(pase_insertado[i].pase_parque);
        if (pase_parque_insertado[i].id_pase_parque == ERROR_SIGNAL) {
            // clearConsole();
            printf(ERROR_INSERTAR_PASE_PARQUE, pase_insertado[i].id_pase);
            printf("Error al insertar el pase_parque con ID: %d\n", pase_insertado[i].pase_parque.id_pase_parque);
            printf("sqlca: %s\n", sqlca.sqlerrm.sqlerrmc);
            printf("sqlcode: %d\n", sqlca.sqlcode);
            printf("sqlstate: %s\n", sqlca.sqlstate);
            return;
        }


    }
    //Mostrar  cada pase
    //Imprimir la compra
    printf(CHAR_IMPRIMIR_ASTERISCO);
    printf(CHAR_MOSTRAR_COMPRA, 
        compra_insertada.id_compra, 
        compra_insertada.id_cliente, 
        compra_insertada.fecha_compra, 
        compra_insertada.hora_compra, 
        precio_total,
        iva_aplicado,
        compra_insertada.monto_total,
        compra_insertada.debito_credito,
        compra_insertada.numero_tarjeta,
        compra_insertada.fecha_vencimiento,
        compra_insertada.cvv,
        compra_insertada.cant_pases,
        compra_insertada.cant_vehiculos
    );
    //Imprimir el precio del pase
    printf(CHAR_PRECIO_PASE, precio_entrada - iva_aplicado);

    //Imprimir el precio delparking
    if( cantidad_vehiculos > 0) {
        PARKING parkingSeleccionado = getParking(parqueSeleccionado.id_parque);
        printf(CHAR_PRECIO_PARKING, parkingSeleccionado.costo_adicional);
    } else {
        printf(CHAR_NO_RESERVADO_PARKING);
    }
    //Imprimir el IVA
    printf(CHAR_IMPRIMIR_IVA, iva_aplicado);
    //Imprimir el monto total
    printf(CHAR_IMPRIMIR_MONTO_TOTAL_SIN_IVA, precio_total);
    printf(CHAR_IMPRIMIR_MONTO_TOTAL_CON_IVA, monto_total_con_iva);
    printf(CHAR_IMPRIMIR_ASTERISCO);
    for (int i = 0; i < cantidad_entradas; i++) {
        
        printf(CHAR_IMPRIMIR_ASTERISCO);
        
        printf(CHAR_IMPRIMIR_PASES,
            i + 1,
            pase_insertado[i].id_pase,
            pase_parque_insertado[i].id_pase_parque,
            pase_insertado[i].id_visitante,
            pase_insertado[i].id_compra,
            pase_parque_insertado[i].id_parque,
            pase_parque_insertado[i].id_precio,
            pase_insertado[i].codigo_qr,
            pase_parque_insertado[i].fecha_accesso,
            pase_parque_insertado[i].incluye_parking ? "Sí" : "No",
            pase_insertado[i].precio_total
        );
        if(cantidad_vehiculos > 0) {
            PARKING parkingSeleccionado = getParking(parqueSeleccionado.id_parque);
            printf(CHAR_COSTO_ADICIONAL_PARKING, parkingSeleccionado.costo_adicional);
        } else {
            printf(CHAR_NO_RESERVADO_PARKING);
        }
        
        printf(CHAR_PRECIO_TOTAL, precio_total);
        printf(CHAR_IMPRIMIR_ASTERISCO);
    }
    printf(CHAR_IMPRIMIR_ASTERISCO);

    EXEC SQL COMMIT;
    if(sqlca.sqlcode != 0) {
        printf("Error al realizar la transacción.\n");
        printf("sqlca: %s\n", sqlca.sqlerrm.sqlerrmc);
        printf("sqlcode: %d\n", sqlca.sqlcode);
        printf("sqlstate: %s\n", sqlca.sqlstate);
        return;
    }

    return;
}

void validarEntradas() { 
    clearConsole();
    char cedula[MAX_CI_LENGTH];
    bool valido;
    
    do {
        printf(CHAR_INGRESE_CEDULA_VISITANTE);
        scanf("%s", cedula);
        while (getchar() != '\n'); // limpiar buffer
    
        valido = esCedulaValida(cedula);
        if (!valido) {
            clearConsole();
            printf(ERROR_CEDULA_INVALIDA);
        }
    } while (!valido);
    
    
    clearConsole();

    int mes;
    do {
        printf(CHAR_INGRESE_MES);
        imprimirMeses();
        scanf("%d", &mes);
        while (getchar() != '\n'); // limpiar buffer
    
        if (!esMesValido(mes)) {
            clearConsole();
            printf(ERROR_MES_INVALIDO, MIN_MES, MAX_MES);
        }
    } while (!esMesValido(mes));
    clearConsole();

    int dia;
    int resultado;
    int totalDiasMes = obtenerDiasDelMes(mes, ANIO_2025);
    
    do {
        printf(CHAR_INGRESE_DIA, totalDiasMes); 
        resultado = scanf("%d", &dia);
        while (getchar() != '\n'); // limpia buffer
    
        if (resultado != 1 || !esDiaValido(dia, mes, ANIO_2025)) {
            clearConsole();
            printf(ERROR_DIA_INVALIDO); 
        }
    } while (resultado != 1 || !esDiaValido(dia, mes, ANIO_2025));
    

    //Buscar el visitante en la base de datos
    VISITANTE visitante= getVisitante(cedula);
    if(visitante.id_visitante== ERROR_SIGNAL ) {
        printf(ERROR_VISITANTE_NO_ENCONTRADO,cedula);
        return;
    };
    printf(CHAR_IMPRIMIR_ASTERISCO);
    printf(CHAR_VISITANTE_ENCONTRADO, visitante.nombre, visitante.ci);
    //Agarrar el total de pases que tiene ese visitante
    imprimirPasesVisitantePorFecha(visitante.id_visitante, mes, dia);
    printf(CHAR_IMPRIMIR_ASTERISCO);
    return;
}

void totalRecaudadoFecha(){
    //Preguntar el año
    clearConsole();
    int anio;
    int resultado_dia;
    
    do {
        printf(CHAR_INGRESE_ANIO);
        resultado_dia = scanf("%d", &anio);
        while (getchar() != '\n'); // limpiar buffer
    
        if (resultado_dia != 1 || !esAnioValido(anio)) {
            clearConsole();
        }
    } while (resultado_dia != 1 || !esAnioValido(anio));
    
    int mes;
    int resultado_mes;
    
    do {
        printf(CHAR_INGRESE_MES);
        imprimirMeses();
        resultado_mes = scanf("%d", &mes);
        while (getchar() != '\n'); // limpiar buffer
    
        if (resultado_mes != 1 || !esMesValido(mes)) {
            clearConsole();
            printf(ERROR_MES_INVALIDO, MIN_MES, MAX_MES);
        }
    } while (resultado_mes != 1 || !esMesValido(mes));
    

    //Agarrar el monto total de compras segun ese año y mes
    long monto_total=getMontoTotal(anio,mes);

    printf(CHAR_IMPRIMIR_ASTERISCO);
    printf(CHAR_MONTO_TOTAL,monto_total);
    printf(CHAR_IMPRIMIR_ASTERISCO);
    return;
}

void registrarCliente() {
    clearConsole();
    CLIENTE cliente;
    //Pedir la ci del cliente
    char ci_cliente[MAX_CI_LENGTH + 1];
    do{
        printf(CHAR_INGRESE_CI_CLIENTE, MAX_CI_LENGTH);
        fgets(ci_cliente, sizeof(ci_cliente), stdin);
        ci_cliente[strcspn(ci_cliente, "\n")] = '\0'; // Eliminar el salto de línea

        if (strlen(ci_cliente) == 0 || strlen(ci_cliente) > MAX_CI_LENGTH) {
            clearConsole();
            printf(CHAR_CEDULA_INVALIDA, MAX_CI_LENGTH);
            continue;
        }

        if (!esCedulaValida(ci_cliente)) {
            clearConsole();
            printf(CEDULA_INVALIDA_INTENTE_NUEVAMENTE);
            continue;
        }
        
        if (existeCliente(ci_cliente)) {
            clearConsole();
            printf(CHAR_CEDULA_EXISTE, ci_cliente);
            return; // Si ya existe, no se registra
        }
    }while(!esCedulaValida(ci_cliente));


    clearConsole();
    strncpy(cliente.ci, ci_cliente, MAX_CI_LENGTH);

    //Preguntar si existe el cliente
    // Si no existe, se pide el nombre y correo
    // Si existe, se muestra un mensaje y se sale de la función
    if(existeCliente(ci_cliente)) {
        clearConsole();
        printf(CHAR_CLIENTE_EXISTE, ci_cliente);
        return;
    }

    char nombre[MAX_NOMBRE_LENGTH + 1];
    char correo[MAX_LENGTH + 1];
    bool nombreValido = false;

    
    int c;
    while ((c = getchar()) != '\n' && c != EOF); 
    do {
        printf(CHAR_INGRESE_NOMBRE_CLIENTE, MAX_NOMBRE_LENGTH);
        fgets(nombre, sizeof(nombre), stdin);
        nombre[strcspn(nombre, "\n")] = '\0';
        if (!esNombreValido(nombre)) {
            clearConsole();
            printf(ERROR_NOMBRE_INVALIDO);
            continue;
        }
        
    } while (!esNombreValido(nombre));
    
    
    strncpy(cliente.nombre, nombre, MAX_NOMBRE_LENGTH);
    
    // Pedir correo
    clearConsole();
    do {
        printf(CHAR_INGRESE_CORREO_CLIENTE);
        fgets(correo, sizeof(correo), stdin);
        correo[strcspn(correo, "\n")] = '\0';
        
        if (strlen(correo) == 0 || strlen(correo) > MAX_LENGTH || !esCorreoValido(correo)) {
            clearConsole();
            printf(CHAR_CORREO_INVALIDO);
        }
    } while (strlen(correo) == 0 || strlen(correo) > MAX_LENGTH || !esCorreoValido(correo));
    strncpy(cliente.email, correo, MAX_LENGTH);

    // Crear el cliente

    CLIENTE nuevo_cliente=insertarCliente(cliente);
    if(nuevo_cliente.id_cliente == ERROR_SIGNAL) {
        clearConsole();
        printf(ERROR_INSERTAR_CLIENTE, cliente.ci);
        return;
    }

    printf(CHAR_CLIENTE_REGISTRADO, nuevo_cliente.id_cliente, nuevo_cliente.ci, nuevo_cliente.nombre, nuevo_cliente.email);

}


void limpiarBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) { }
    return;
}
