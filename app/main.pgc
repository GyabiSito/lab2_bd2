#include "main.h"

EXEC SQL INCLUDE sqlca;
EXEC SQL WHENEVER SQLERROR SQLPRINT;
EXEC SQL WHENEVER SQLWARNING SQLPRINT;

EXEC SQL BEGIN DECLARE SECTION;
int id_parque;
int id_ubicacion;
char nombre[51];
int capacidad_maxima_diaria;
int cedula_visitante;

EXEC SQL END DECLARE SECTION;


int main()
{
    // Llama al singleton para obtener la conexión activa
    DBSingleton* db = getInstance();
    if (!db || !db->conectado) {
        printf("No se pudo conectar a la base de datos.\n");
        return 1;
    }

    EXEC SQL DECLARE cursor_parque CURSOR FOR
        SELECT id_parque, id_ubicacion, nombre, capacidad_maxima_diaria FROM parques;

    EXEC SQL DECLARE cursor_ci_visitante CURSOR FOR
        SELECT ci FROM visitantes;

    EXEC SQL OPEN cursor_parque;
    EXEC SQL OPEN cursor_ci_visitante;
    while (1)
    {
        EXEC SQL FETCH cursor_parque INTO :id_parque, :id_ubicacion, :nombre, :capacidad_maxima_diaria;
        EXEC SQL FETCH cursor_ci_visitante INTO :cedula_visitante;
        if (sqlca.sqlcode != 0)
        {
            if (sqlca.sqlcode == 100)
            {
                printf("No hay más parques disponibles.\n");
                break; // Fin del cursor
            }
            else
            {
                printf("Error al obtener datos: %d\n", sqlca.sqlcode);
                cerrar_conexion(); // Cierra conexión antes de salir
                exit(1);
            }
        }
        printf("Parque ID: %d\n", id_parque);
        printf("cedula visitante: %d\n", cedula_visitante);
        
        mostrarMenu();
        int opcion;
        scanf("%d", &opcion);
        switch (opcion) {
            case 1: 
                
                realizarVenta();
                // Aquí iría la lógica para la venta de entradas
                break;
            case 2:
                validarEntradas();
                break;
            case 3:
                printf("Total Recaudado Mes o Año para el parque %s (ID: %d)\n", nombre, id_parque);
                // Aquí iría la lógica para calcular el total recaudado
                break;
            case 0:
                printf("Saliendo del programa...\n");
                cerrar_conexion(); // Cierra conexión antes de salir
                return 0;
            default:
                printf("Opción no válida. Intente nuevamente.\n");
        }

    }

    EXEC SQL CLOSE cursor_parque;
    EXEC SQL CLOSE cursor_ci_visitante;
    cerrar_conexion(); // Desconectar y limpiar al final
    return 0;
}

void mostrarMenu()
{
    printf("Seleccione una opción: \n");
    printf("1. Venta de entradas\n");
    printf("2. Validar Entrada\n");
    printf("3. Total Recaudado Mes o Año \n");
    printf("0. Salir\n");
}

void realizarVenta() {
    int id_parque;
    int cantidad_entradas;
    int cantidad_vehiculos;
    char deseaParking;
    char fecha[11]; // formato YYYY-MM-DD

    printf("Ingrese ID del parque: ");
    scanf("%d", &id_parque);

    printf("Ingrese fecha (YYYY-MM-DD): ");
    scanf("%10s", fecha);  // ✅ sin asterisco

    printf("Ingrese cantidad de entradas: ");
    scanf("%d", &cantidad_entradas);

    if (!validarCapacidadParque(id_parque, fecha, cantidad_entradas)) {
        printf("No hay capacidad disponible.\n");
        return;
    }

    printf("¿Desea parking? (S/N): ");
    scanf(" %c", &deseaParking);  // espacio para consumir enter anterior

    if (deseaParking == 'S' || deseaParking == 's') {
        printf("Ingrese cantidad de vehículos: ");
        scanf("%d", &cantidad_vehiculos);

        if (!validarCapacidadParking(id_parque, fecha, cantidad_vehiculos)) {
            printf("No hay espacio de parking disponible.\n");
            return;
        }
    } else {
        cantidad_vehiculos = 0;
    }

    // Aquí continuarías con lógica de ingreso de visitante, pago, etc.
    printf("Venta registrada (simulada).\n");
}

void validarEntradas() {
    
    char cedula[8];
    printf("Ingrese cédula del visitante: ");
    scanf("%s", cedula);

    if(!esCedulaValida(cedula)) return;

    printf("Cédula válida. Procediendo con la validación...\n");
    
    int mes;
    printf("Ingrese mes (1-12): ");
    imprimirMeses();
    scanf("%d", &mes);
    if (!esMesValido(mes)) return;

    //En la funcion obtenerDiasDelMes, se ponen los dias que tienen los meses
    int dias = obtenerDiasDelMes(mes, ANIO_2025);

    //Agarrar el total de pases que tiene ese visitante
    //Guardaros en una lista o array  
    //PASE pases[TOTAL_PASES]
    //Por cada pase, validarlo con pases_parques y preguntar por la fecha_acceso
    

}


/*

INICIAR VENTA

REPETIR
    MOSTRAR PARQUES DISPONIBLES
    INGRESAR ID_PARQUE
    INGRESAR FECHA

    INGRESAR CANTIDAD_ENTRADAS
    VALIDAR CAPACIDAD PARQUE

    SI CAPACIDAD_OK
        PREGUNTAR: ¿DESEA PARKING? (S/N)
        SI SÍ:
            INGRESAR CANTIDAD_VEHICULOS
            VALIDAR CAPACIDAD ESTACIONAMIENTO
        SINO:
            CANTIDAD_VEHICULOS = 0

        INGRESAR DATOS VISITANTES (NOMBRE, CÉDULA) x CANTIDAD_ENTRADAS

        CALCULAR PRECIO TOTAL (entradas + parking)
        MOSTRAR RESUMEN
        PREGUNTAR CONFIRMACIÓN

        SI CONFIRMADO
            INGRESAR DATOS TARJETA
            INSERTAR EN BASE DE DATOS
            MOSTRAR CÓDIGOS QR
        FIN SI
    SINO
        MOSTRAR "SIN CUPOS"
    FIN SI

    PREGUNTAR: ¿DESEA INGRESAR OTRA VENTA?
HASTA QUE RESPUESTA SEA "NO"

VOLVER A MENÚ


*/
