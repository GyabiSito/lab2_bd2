#include "main.h"

EXEC SQL INCLUDE sqlca;
EXEC SQL WHENEVER SQLERROR SQLPRINT;
EXEC SQL WHENEVER SQLWARNING SQLPRINT;

EXEC SQL BEGIN DECLARE SECTION;
int id_parque;
int id_ubicacion;
char nombre[MAX_NOMBRE_LENGTH];
int capacidad_maxima_diaria;
int cedula_visitante;

EXEC SQL END DECLARE SECTION;


int main()
{

    DBSingleton* db = getInstance();
    if (!db || !db->conectado) {
        printf(ERROR_NO_CONEXION_DB);
        return 1;
    }

    EXEC SQL DECLARE cursor_parque CURSOR FOR
        SELECT id_parque, id_ubicacion, nombre, capacidad_maxima_diaria FROM parques;

    EXEC SQL DECLARE cursor_ci_visitante CURSOR FOR
        SELECT ci FROM visitantes;

    EXEC SQL OPEN cursor_parque;
    EXEC SQL OPEN cursor_ci_visitante;
    while (1)
    {
        EXEC SQL FETCH cursor_parque INTO :id_parque, :id_ubicacion, :nombre, :capacidad_maxima_diaria;
        EXEC SQL FETCH cursor_ci_visitante INTO :cedula_visitante;
        if (sqlca.sqlcode != SQL_SUCCESS)
        {
            if (sqlca.sqlcode == SQL_NO_DATA_FOUND)
            {
                printf(CHAR_NO_MAS_PARQUES_DISPONIBLES);
                break; // Fin del cursor
            }
            else
            {
                printf(ERROR_OBTENER_DATOS, sqlca.sqlcode);
                EXEC SQL CLOSE cursor_parque;
                EXEC SQL CLOSE cursor_ci_visitante;
                cerrar_conexion(); // Cierra conexión antes de salir
                exit(1);
            }
        }
        printf("Parque ID: %d\n", id_parque);
        printf("cedula visitante: %d\n", cedula_visitante);
        
        mostrarMenu();
        char buffer[MAX_NOMBRE_LENGTH]; // Almacena la entrada del usuario
        int opcion;

        fgets(buffer, sizeof(buffer), stdin); //Lee la linea completa (incluyendo espacios) y lo guarda en el buffer de forma segura

        char *sanitizado = sanitizarInput(buffer); //Verifica solo los numeros
        if (sanitizado == NULL) {
            printf(CHAR_OPCION_INVALIDA);
            continue;
        }

        opcion = atoi(sanitizado); //Pasa a entero


        switch (opcion) {
            case 1: 
                realizarVenta();
                break;
            case 2:
                validarEntradas();
                break;
            case 3:
                totalRecaudadoFecha();
                break;
            case 0:
                printf("Saliendo del programa...\n");
                cerrar_conexion(); // Cierra conexión antes de salir
                return 0;
            default:
                printf("Opción no válida. Intente nuevamente.\n");
        }

    }
    printf(CHAR_DESCONECTANDO);
    EXEC SQL CLOSE cursor_parque;
    EXEC SQL CLOSE cursor_ci_visitante;
    cerrar_conexion(); // Desconectar y limpiar al final
    return 0;
}

void mostrarMenu()
{
    printf(MENU_SELECCIONAR_OPCION);
    printf(MENU_REALIZAR_VENTA);
    printf(MENU_VALIDAR_ENTRADAS);
    printf(MENU_TOTAL_RECAUDADO_MES_ANIO);
    printf(MENU_SALIR);
}

void realizarVenta() {
    int id_parque;
    int cantidad_entradas;
    int cantidad_vehiculos;
    char deseaParking;

    printf(CHAR_INGRESE_ID_PARQUE);
    scanf("%d", &id_parque);


    int mes;
    printf(CHAR_INGRESE_MES);
    imprimirMeses();
    scanf("%d", &mes);
    if (!esMesValido(mes)) return;
    
    //En la funcion obtenerDiasDelMes, se ponen los dias que tienen los meses
    int totalDiasMes = obtenerDiasDelMes(mes, ANIO_2025);
    printf(CHAR_INGRESE_DIA, totalDiasMes);
    int dia;
    scanf("%d", &dia);
    if(!esDiaValido(dia, mes, ANIO_2025)) return;

    printf(CHAR_INGRESE_CANTIDAD_ENTRADAS);
    scanf("%d", &cantidad_entradas);

    if (!validarCapacidadParque(id_parque, mes,dia, cantidad_entradas)) {
        printf(CHAR_NO_ESPACIOS_PARQUE, id_parque, mes, dia);
        return;
    }

    printf(CHAR_DESEA_PARKING);
    scanf(" %c", &deseaParking);

    if (tolower(deseaParking) == 's') {
        printf(CHAR_INGRESE_CANTIDAD_VEHICULOS);
        scanf("%d", &cantidad_vehiculos);

        if (!validarCapacidadParking(id_parque, mes, dia, cantidad_vehiculos)) {
            printf(CHAR_NO_ESPACIOS_PARKING, id_parque, mes, dia);
            return;
        }
    } else {
        cantidad_vehiculos = 0;
    }

    //Sigue...
    printf("Venta registrada (simulada).\n");
}

void validarEntradas() { 
    char cedula[MAX_CI_LENGTH];
    printf(CHAR_INGRESE_CEDULA);
    scanf("%s", cedula);

    if(!esCedulaValida(cedula)) return;

    printf(CHAR_CEDULA_VALIDA);
    
    int mes;
    printf(CHAR_INGRESE_MES);
    imprimirMeses();
    scanf("%d", &mes);
    if (!esMesValido(mes)) return;
    
    //En la funcion obtenerDiasDelMes, se ponen los dias que tienen los meses
    int totalDiasMes = obtenerDiasDelMes(mes, ANIO_2025);
    printf(CHAR_INGRESE_DIA, totalDiasMes);
    int dia;
    scanf("%d", &dia);
    if(!esDiaValido(dia, mes, ANIO_2025)) return;

    //Buscar el visitante en la base de datos
    VISITANTE visitante= getVisitante(cedula);
    if(visitante.id_visitante== ERROR_SIGNAL ) return;

    printf(CHAR_VISITANTE_ENCONTRADO, visitante.nombre, visitante.id_visitante);
    //Agarrar el total de pases que tiene ese visitante
    imprimirPasesVisitantePorFecha(visitante.id_visitante, mes, dia);

    return;
}

void totalRecaudadoFecha(){
    //Preguntar el año
    int anio;
    printf(CHAR_INGRESE_ANIO);
    scanf("%d",&anio);
    if(!esAnioValido(anio)) return;

    //Preguntar el mes
    int mes;
    printf(CHAR_INGRESE_MES);
    imprimirMeses();
    scanf("%d", &mes);
    if (!esMesValido(mes)) return;

    //Agarrar el monto total de compras segun ese año y mes
    long monto_total=getMontoTotal(anio,mes);

    printf(CHAR_IMPRIMIR_ASTERISCO);
    printf(CHAR_MONTO_TOTAL,monto_total);
    printf(CHAR_IMPRIMIR_ASTERISCO);
    return;
}
/*

INICIAR VENTA

REPETIR
    MOSTRAR PARQUES DISPONIBLES
    INGRESAR ID_PARQUE
    INGRESAR FECHA

    INGRESAR CANTIDAD_ENTRADAS
    VALIDAR CAPACIDAD PARQUE

    SI CAPACIDAD_OK
        PREGUNTAR: ¿DESEA PARKING? (S/N)
        SI SÍ:
            INGRESAR CANTIDAD_VEHICULOS
            VALIDAR CAPACIDAD ESTACIONAMIENTO
        SINO:
            CANTIDAD_VEHICULOS = 0

        INGRESAR DATOS VISITANTES (NOMBRE, CÉDULA) x CANTIDAD_ENTRADAS

        CALCULAR PRECIO TOTAL (entradas + parking)
        MOSTRAR RESUMEN
        PREGUNTAR CONFIRMACIÓN

        SI CONFIRMADO
            INGRESAR DATOS TARJETA
            INSERTAR EN BASE DE DATOS
            MOSTRAR CÓDIGOS QR
        FIN SI
    SINO
        MOSTRAR "SIN CUPOS"
    FIN SI

    PREGUNTAR: ¿DESEA INGRESAR OTRA VENTA?
HASTA QUE RESPUESTA SEA "NO"

VOLVER A MENÚ


*/
